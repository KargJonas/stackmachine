0   HALT    return 0;
1   CONST   stack[++sp] = progmem[++pc];
2   DUP     stack[++sp] = stack[sp];
3   DROP    sp--;
4   READ    stack[++sp] = getchar();
5   PRINT   putchar(stack[sp--]);
6   JMP     pc = stack[sp--] - 1;
7   BNZ     pc = stack[sp] != 0 ? progmem[pc + 1] - 1 : pc; sp--;
8   LSS     stack[sp - 1] = stack[sp - 1] < stack[sp]; sp--;
9   ADD     stack[sp - 1] += stack[sp]; sp--;
10  SUB     stack[sp - 1] -= stack[sp]; sp--;


#define OP_HALT    return 0;
#define OP_CONST   stack[++sp] = progmem[++pc];
#define OP_DUP     stack[++sp] = stack[sp];
#define OP_DROP    sp--;
#define OP_READ    stack[++sp] = getchar();
#define OP_PRINT   putchar(stack[sp--]);
#define OP_JMP     pc = stack[sp--] - 1;
#define OP_BNZ     pc = stack[sp] != 0 ? progmem[pc + 1] - 1 : pc; sp--;
#define OP_LSS     stack[sp - 1] = stack[sp - 1] < stack[sp]; sp--;
#define OP_ADD     stack[sp - 1] += stack[sp]; sp--;
#define OP_SUB     stack[sp - 1] -= stack[sp]; sp--;


#define OP_SWITCH switch (instr) { \
  /* HALT  */   case 0:  return 0; \
  /* CONST */   case 1:  stack[++sp] = progmem[++pc]; break; \
  /* DUP   */   case 2:  stack[++sp] = stack[sp]; break; \
  /* DROP  */   case 3:  sp--; break; \
  /* READ  */   case 4:  stack[++sp] = getchar(); break; \
  /* PRINT */   case 5:  putchar(stack[sp--]); break; \
  /* JMP   */   case 6:  pc = stack[sp--] - 1; break; \
  /* BNZ   */   case 7:  pc = stack[sp] != 0 ? progmem[pc + 1] - 1 : pc; sp--; break; \
  /* LSS   */   case 8:  stack[sp - 1] = stack[sp - 1] < stack[sp]; sp--; break; \
  /* ADD   */   case 9:  stack[sp - 1] += stack[sp]; sp--; break; \
  /* SUB   */   case 10: stack[sp - 1] -= stack[sp]; sp--; break;  \
}

#define N_INSTR 11
char* instr_names[N_INSTR] = {
  "HALT",   // 0
  "CONST",  // 1
  "DUP",    // 2
  "DROP",   // 3
  "READ",   // 4
  "PRINT",  // 5
  "JMP",    // 6
  "BNZ",    // 7
  "LSS",    // 8
  "ADD",    // 9
  "SUB"     // 10
};
